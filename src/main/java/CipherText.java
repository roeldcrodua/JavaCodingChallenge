import java.util.*;

public class CipherText {
    /*
    Given a keyword of unique alphabets and a text, write a program to encrypt the text using the keyword.
    Cipher text is generated by arranging the elements of the text below the keyword and combining them column wise.
    The columns should be picked based on the alphabetical order of the characters in the keyword
    Assume, given keyword is PAS and text is ILIKECODE, place all the characters of the text in the below format.

    PAS
    ILI
    KEC
    ODE

    The cipher text will be ALEDPIKOSICE

    Input format :
    The first line gives the Keyword. The second line gives the text that needs to be encrypted. Read the input from standard input.

    Output format :
    Print the cipher text to standard output.

    Sample Input	Sample Output	Explanation
    PAS
    ILIKECODE	    ALEDPIKOSIC
     */

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String keyword = in.nextLine();
        String text = in.nextLine();

        // Split the text into group
        List<String> group = new ArrayList<>();
        int index =0;
        group.add(keyword);
        for (int i=0; i<keyword.length();i++) {
            String temp = text;
            group.add(temp.substring(index, keyword.length() + index));
            index += keyword.length();
        }
        System.out.println(group);

        // Create another list according to the column group
        SortedSet<String> groupColumn = new TreeSet<>();
        for (String i: keyword.split("")) {
            StringBuilder sb = new StringBuilder();
            for (String s: group){
                sb.append(s.charAt(keyword.indexOf(i)));
            }
            groupColumn.add(sb.toString());
        }
        System.out.println(groupColumn);

        // Combine the column group by ascending order as what is sortedset is.
        StringBuilder output = new StringBuilder();
        for (String out: groupColumn){
            output.append(out);
        }
        System.out.println(output);

    }

}
